#!/usr/bin/php
<?php
define('CLI_SCRIPT', true);
define('CACHE_DISABLE_ALL', true); // This prevents reading of existing caches.

$MOODLE_COMMIT = getenv('MOODLE_COMMIT') ?: false;
$MOODLE_APP = getenv('MOODLE_APP') ?: '/var/www/html';
require($MOODLE_APP . '/config.php');
require_once($CFG->libdir.'/clilib.php');
require_once($CFG->dirroot.'/cache/locallib.php');

list($options, $unrecognized) = cli_get_params([
    'help'  => false,
    'plugin' => false,
    'name' => false,
    'server' => false,
    'auth' => false,
    'extra_config' => false,
    'modes' => false,
    'overwrite' => false,
    'reset' => false
], [
    'h' => 'help',
    'p' => 'plugin',
    'n' => 'name',
    's' => 'server',
    'a' => 'auth',
    'e' => 'extra_config',
    'm' => 'modes',
    'o' => 'overwrite',
    'r' => 'reset'
]);

if ($unrecognized) {
    $unrecognized = implode(PHP_EOL.'  ', $unrecognized);
    cli_error(get_string('cliunknowoption', 'core_admin', $unrecognized));
}

if ($options['help'] or !$options['plugin'] or !$options['name'] or !$options['server']) {
    cli_writeln("Add and config a muc store
Options:
    -h, --help              Print out this help
    -p, --plugin            Store plugin type. Required
    -n, --name              Store name. Required
    -s, --server            Store server/host/ip. Required
    -a, --auth              Store server auth/password
    -e, --extra_config      Store extra config separated by comma. Ex: 'prefix=mdl_,serializer=1,compressor=0'
    -m, --modes             Modes to be set as default for the store, separated by comma. Ex: 'application,session,request'
    -o, --overwrite         Overwrite store config if changed
    -r, --reset             Reset MUC config before creating and configuring store
Example:
\$ sudo -u www-data muc-store.php -p=redis -n=redis -s=localhost -a='mypass' -m='application,session'");
    exit(2);
}

// ====== Variables ======
$store_plugin = $options['plugin'];
$store_name = $options['name'];
$store_config = array(
    'server' => $options['server'],
);
if ($options['auth']) {
    $store_config['password'] = $options['auth'];
}
if ($options['extra_config']) {
    $store_extra_config = array_map('trim', explode(',', $options['extra_config']));
    foreach ($store_extra_config as $store_extra_config_item) {
        $store_extra_config_item = explode('=', $store_extra_config_item);
        $store_config[$store_extra_config_item[0]] = $store_extra_config_item[1];
    }
}
// whether to reset muc completely
$init_resetting_muc = $options['reset'];
// whether to edit store config if changed
$edit_config_if_changed = $options['overwrite'];
// whether to set default modes
$set_default_modes = ($options['modes']) ? true : false;
if ($set_default_modes) {
    // default modes
    $store_modes_default = array_map('trim', explode(',', $options['modes']));
    $store_modes_default_items = array('application', 'session', 'request');
    $store_default_application = array('default_application');
    $store_default_session = array('default_session');
    $store_default_request = array('default_request');
    $store_default_mappings = array();
    foreach ($store_modes_default as $store_mode) {
        if (!in_array($store_mode, $store_modes_default_items)){
            cli_error($store_mode . " is not a valid mode");
        } else {
            $cache_store_mode = constant('cache_store::MODE_'.strtoupper($store_mode));
            array_push($store_default_mappings, $cache_store_mode);
            ${'store_default_' . $store_mode} = array($store_name);
        }
    }
}

// ====== Logic ======
// reset cache
if ($init_resetting_muc) {
    reset_muc();
}
// check if redis store exits
$config = cache_config_writer::instance();
$stores = $config->get_all_stores();
if (array_key_exists($store_name, $stores)) {
    // config store if different
    if ($store_config != $stores[$store_name]['configuration']) {
        edit_store_instance();
    }
    // check default application and session mappings
    $store_default_mappings_items = array();
    $mappings = $config->get_mode_mappings();
    foreach ($mappings as $mapping) {
        if ($mapping['store'] == $store_name) {
            array_push($store_default_mappings_items, $mapping['mode']);
        }
    }
    if ($store_default_mappings != $store_default_mappings_items) {
        set_default_modes();
    }
} else {
    add_store_instance();
    set_default_modes();
}

// ====== Functions ======
// Reset muc
function reset_muc() {
    global $CFG;
    cli_writeln("Resetting MUC");
    $muc_file = isset($CFG->altcacheconfigpath) ? $CFG->altcacheconfigpath : $CFG->dataroot.'/muc/config.php';
    unlink($muc_file);
    cache_factory::reset();
}

// Add store
function add_store_instance() {
    global $config, $store_plugin, $store_name, $store_config;
    cli_writeln("Adding store");
    $config->add_store_instance($store_plugin, $store_name, $store_config);
}

// Edit store
function edit_store_instance() {
    global $edit_config_if_changed, $config, $store_plugin, $store_name, $store_config;
    if ($edit_config_if_changed) {
        cli_writeln("Editing store");
        $config->edit_store_instance($store_plugin, $store_name, $store_config);
    }
}

// Edit store
function set_default_modes() {
    global $set_default_modes, $config, $store_default_application, $store_default_session, $store_default_request;
    if ($set_default_modes) {
        cli_writeln("Setting default modes");
        $config->set_mode_mappings(array(
            cache_store::MODE_APPLICATION => $store_default_application,
            cache_store::MODE_SESSION => $store_default_session,
            cache_store::MODE_REQUEST => $store_default_request
        ));
    }
}
?>
