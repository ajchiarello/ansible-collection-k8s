---
# defaults file
cr_version: v1alpha1
cr_api_version: "{{ cr_group }}/{{ cr_version }}"

## CR object and status
cr_object: "{{ lookup('vars', ('_' + cr_group + '_' + cr_kind) | lower |
  regex_replace('(\\.|\\-)','_'), default='') }}"
cr_uid: "{{ cr_object.metadata.uid | default('') }}"
cr_status: "{{ k8s_status_task.result.status | default(cr_object.status,true) | default({},true) }}"
cr_status_ready: "{{ cr_status_properties.ready | default(false) | bool }}"
cr_status_conditions: "{{ cr_status.conditions | default([]) }}"
cr_status_properties:
  "{% set copy=cr_status.copy() %}{% if copy.conditions is defined %}{% set
  removed=copy.pop('conditions') %}{% endif %}{{ copy }}"
cr_cwd: "{{ '/tmp/ansible-operator/runner/' +
  '/'.join([cr_group, cr_version, cr_kind, meta_namespace, meta_name, 'project']) }}"

meta_name: "{{ ansible_operator_meta.name }}"
meta_namespace: "{{ ansible_operator_meta.namespace }}"
pods_group: "{{ cr_kind }}__{{ meta_namespace.replace('-', '_') }}__{{ meta_name.replace('-', '_') }}__pods"
pods_ready_group: "{{ pods_group }}_ready"
meta_name_max_length: 63

# general k8s state for resources: present or absent
state: present

# common path
common_path: common

# common labels
meta_app_part_of: "{{ meta_name }}"

# templates
deploy_template: "{{ common_path }}/deploy.yaml.j2"
sts_template: "{{ common_path }}/sts.yaml.j2"
job_template: "{{ common_path }}/job.yaml.j2"
cronjob_template: "{{ common_path }}/cronjob.yaml.j2"
cm_template: "{{ common_path }}/cm.yaml.j2"
pvc_template: "{{ common_path }}/pvc.yaml.j2"
vct_template: "{{ common_path }}/vct.yaml.j2"
secret_template: "{{ common_path }}/secret.yaml.j2"
service_template: "{{ common_path }}/service.yaml.j2"
route_template: "{{ common_path }}/route.yaml.j2"
nginx_template: "{{ common_path }}/nginx.yaml.j2"
ingress_template: "{{ common_path }}/ingress.yaml.j2"
sc_template: "{{ common_path }}/sc.yaml.j2"
routine_template: "{{ common_path }}/routine.yaml.j2"

# images
image_pull_secret: false

# inventory
inventory_include: false
inventory_refresh_task: not-refresh
inventory_uuid: '{{ (cr_group + cr_version + cr_kind + meta_namespace + meta_name) | to_uuid }}'
annotation_inventory_hostvars:
  ansible_remote_tmp: /var/tmp/.ansible
  ansible_python_interpreter: /usr/libexec/platform-python
  ansible_ssh_pipelining: true

# status
notify_status_jwt_secret_env_name: JWT_TOKEN_SECRET
