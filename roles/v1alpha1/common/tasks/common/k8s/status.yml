- name: set status
  when:
    # https://github.com/operator-framework/operator-sdk-ansible-util/issues/18
    - not ansible_check_mode
    - not k8s_status_omit | default(false)
  register: k8s_status_task
  k8s_status:
    api_version: "{{ k8s_status_api_version | default(cr_api_version) }}"
    kind: "{{ k8s_status_kind | default(cr_kind) }}"
    name: "{{ k8s_status_name | default(meta_name) }}"
    namespace: "{{ k8s_status_namespace | default(meta_namespace) }}"
    status: "{{ k8s_status_properties | default(omit,true) }}"
    conditions: "{{ k8s_status_conditions | default(omit,true) }}"
    replace_lists: "{{ k8s_status_replace_lists | default(omit,true) }}"


- name: notify cr status
  when:
    - k8s_status_task.result is defined
    - k8s_status_task is changed or status_cr_notify_force
    - _status_cr_notify
  vars:
    _status_cr_notify: "{{ status_cr_notify }}"
  block:
    - name: notify status
      vars:
        _status_cr_notify_uuid: "{{ _status_cr_notify.uuid | default(cr_uid) }}"
        _status_cr_notify_jwt_secret_env_name: "{{ _status_cr_notify.jwt_secret_env_name | default('JWT_TOKEN_SECRET') }}"
        _status_cr_notify_jwt_payload:
          "{{
              {'uuid': _status_cr_notify_uuid}
            if
              lookup('env',_status_cr_notify_jwt_secret_env_name) and _status_cr_notify_uuid is defined and _status_cr_notify_uuid
            else
              false }}"
        _status_cr_notify_header_auth_token:
          "{{
              _status_cr_notify_jwt_payload | krestomatio.k8s.jwt_token(_status_cr_notify_jwt_secret_env_name)
            if
              _status_cr_notify_jwt_payload is defined and _status_cr_notify_jwt_payload
            else
              _status_cr_notify.header_auth_token | default('') }}"
        _status_cr_notify_header_auth_header:
          Authorization:
            "{{ _status_cr_notify.header_auth_type | default('Bearer') }} {{ _status_cr_notify_header_auth_token }}"
      failed_when: false
      register: _status_cr_notify_task
      uri:
        body: "{{ k8s_status_task.result if
          (_status_cr_notify.object | default('False') | bool)
          else k8s_status_task.result.status }}"
        body_format: "{{ _status_cr_notify.body_format | default('json') }}"
        client_cert: "{{ _status_cr_notify.client_cert | default(omit) }}"
        client_key: "{{ _status_cr_notify.client_key | default(omit) }}"
        force_basic_auth: "{{ _status_cr_notify.force_basic_auth | default(omit) }}"
        headers:
          "{{
              _status_cr_notify.headers | default({}) | combine(_status_cr_notify_header_auth_header)
            if
              _status_cr_notify_header_auth_token != ''
            else
              _status_cr_notify.headers | default(omit)
          }}"
        method: "{{ _status_cr_notify.method | default('POST') }}"
        return_content: "{{ _status_cr_notify.return_content | default(omit) }}"
        status_code: "{{ _status_cr_notify.status_code | default([200]) }}"
        timeout: "{{ _status_cr_notify.timeout | default(5) }}"
        url: "{{ _status_cr_notify.url }}"
        user: "{{ _status_cr_notify.user | default(omit) }}"
        password:
          "{{ _status_cr_notify.password | default(lookup('env','NOTIFY_STATUS_PASSWORD')) | default(omit, true) }}"
        validate_certs: "{{ _status_cr_notify.validate_certs | default(omit) }}"

    - name: show notify status error
      when: _status_cr_notify_task.status not in _status_cr_notify.status_code | default([200])
      debug:
        msg: |
          Could not notify status to endpoint {{ _status_cr_notify.url }}
          {%  if _status_cr_notify_task.msg is defined %}
          {{ _status_cr_notify_task.msg }}
          {% endif %}
